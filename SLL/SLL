#include<stdio.h>
#include<stdlib.h>

struct node{
    int data;
    struct node * link;
};
struct node * head = NULL,*cur,*temp,*temp1;

struct node * create(){
   int n;
   printf("Enter the total number of nodes\n");
   scanf("%d",&n);
   while(n--){
      cur = (struct node*)malloc(sizeof(struct node));
      printf("enter the value to be inserted in the node\n");
      scanf("%d",&(cur->data));
      cur->link = NULL;

      if(head == NULL)
           head = cur;
      else{
         temp = head;
         while(temp -> link != NULL)
              temp = temp -> link;
         temp -> link = cur;
      }
   }
   return head;
}

struct node * insert_begin(int ele){
    cur = (struct node*)malloc(sizeof(struct node));
    cur -> data = ele;
    cur -> link = head;
    head = cur;
    return head;
}

struct node * insert_end(int ele){
    cur = (struct node *)malloc(sizeof(struct node));
    cur -> data = ele;
    cur -> link = NULL;
    temp = head;
    while(temp->link != NULL)
         temp = temp->link;
    temp->link = cur;
    return head;
}
struct node *insert_pos(int ele, int pos){
    int c=1;
    cur = (struct node *)malloc(sizeof(struct node));
    cur->data=ele;
    temp = head;
    while(c<pos-1){
       temp = temp->link;
       c++;
    }
    cur->link = temp->link;
    temp->link = cur;
    return head;
}


void display(struct node *head){
     temp = head;
     while(temp->link != NULL){
         printf("%d -> ",(temp->data));
         temp = temp->link;
     }
     printf("%d\n",(temp->data));
} 

struct node* delete_begin(struct node *head){
     temp = head;
     head = temp->link;
     printf("deleted element is:%d\n",temp->data);
     free(temp);
     return head;
}

struct node * delete_end(struct node*head){
     temp = head;
     while(temp->link != NULL){
              temp1 = temp;
              temp = temp->link;
     }
     temp1->link = NULL;
     printf("deleted element is:%d\n",temp->data);
     free(temp);
     return head;
}

struct node *delete_pos(struct node *head,int pos){
     temp = head;
     int c=1;
     while(c<pos){
        temp1 = temp;
        temp = temp->link;
        c++;
     }
     temp1->link = temp->link;
     printf("deleted element %d\n",temp->data);
     free(temp);

     return head;
}
void reversedisplay(struct node*head){
    if(head != NULL){
        reversedisplay(head->link);
        printf("%d ",head->data);
    }
}

int search(struct node *head,int key){
    int c =1;
    temp = head;
    while(temp != NULL){
        if(key == temp->data){
            return c;
        }
        temp =temp->link;
        c++;
    }
    return -1;
}

struct node* sorting(struct node *head){
    int x,i,s;
    temp = head;
    temp1 = NULL;
    while(s){
        s=0;
        temp = head;
        while(temp->link!=temp1){
            if((temp->data) > (temp->link->data)){
                x = temp->data;
                temp->data = temp->link->data;
                temp->link->data = x;
                s = 1;
            }
            temp = temp->link;
        }
        temp1 = temp;
    } 
    
    return head;
}    
